<?php

/**
 * Implementation of hook_preprocess_node().
 */
function link_resource_preprocess_node(&$vars) {
  if (!empty($vars['node']) && $vars['node']->type == 'link_resource') {
    try {
      $vars['url'] = entity_metadata_wrapper('node', $vars['node'])->field_url->value(array('sanitize' => TRUE));
    } catch (UnexpectedValueException $e) {
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function link_resource_form_link_resource_node_form_alter(&$form, $form_state) {
  $form['#validate'][] = 'link_resource_url_validate';
}

/**
 * Validation callback to use for validating URLs.
 */
function link_resource_url_validate($form, &$form_state) {
  $lang = $form['field_url']['#language'];
  $url = $form_state['values']['field_url'][$lang][0]['value'];
  if (!link_resource_validate_url($url))
    form_set_error('field_url', 'Invalid URL.');
}

/**
 * Validate a URL
 *
 * @param string $url
 *      The URL to validate
 * @return boolean
 *      TRUE if valid, FALSE if not.
 */
function link_resource_validate_url($url) {
  $regex = '@
^                                                   # Begining of the line
(http|ftp)s?://                                     # Scheme
(
  ([a-z0-9-]+\.)*[a-z0-9-]+\.[a-z]{2,5}               # Domain Name
|                                                   # OR
  [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}    # IPv4 Address
)
(/[A-Za-z0-9-_\?\/\.~\+%&=:;#\@\s\$\{\}]*)?               # Path
$                                                   # End of the line
@x';
  return preg_match($regex, $url);
}

/**
 * Implementation of hook_theme_registry_alter()
 */
function link_resource_theme_registry_alter(&$theme_registry) {
  _course_hub_register_theme_paths($theme_registry, drupal_get_path('module', 'link_resource'), array('node'));
}

/**
 * Implementation of hook_hub_get_resource_types()
 *
 * @return array
 *    An array of node-type strings.
 */
function link_resource_hub_get_resource_types() {
  return array('link_resource');
}

/**
 * Hook hook_hub_get_resource_url()
 *
 * @param object $resourceNode
 * @return array
 *    An array of url strings.
 */
function link_resource_hub_get_resource_url($resourceNode) {
  if ($resourceNode->type == 'link_resource')
    return array(entity_metadata_wrapper('node', $resourceNode)->field_url->value());
}