<?php
/**
 * Implementation of hook_form_alter().
 */
function rss_resource_form_rss_resource_node_form_alter(&$form, $form_state) {
  $form['#validate'][] = 'link_resource_url_validate';
  $form['#validate'][] = 'rss_resource_site_url_validate';
  $form['#validate'][] = 'rss_resource_feed_validate';
}

/**
 * Validation callback to use for validating URLs.
 */
function rss_resource_site_url_validate($form, &$form_state) {
  $url = $form_state['values']['field_site_url'][0]['value'];
  if (strlen($url) && !link_resource_validate_url($url)) {
    form_set_error('field_site_url', 'Invalid URL.');
  } else {
    // Fetch the value from the feed.
    $feedUrl = $form_state['values']['field_url'][0]['value'];
    try {
      $feed = rss_resource_fetch_feed($feedUrl);
      if ($feed->get_link() && link_resource_validate_url($feed->get_link()))
      $form_state['values']['field_site_url'][0]['value'] = $feed->get_link();
    } catch (Exception $e) {
    }
  }
}

/**
 * Validation callback to use for validating that a feed exists.
 */
function rss_resource_feed_validate($form, &$form_state) {
  $feedUrl = $form_state['values']['field_url'][0]['value'];

  try {
    $feed = rss_resource_fetch_feed($feedUrl);
  } catch (Exception $e) {
    form_set_error('field_url', $e->getMessage());
    return array();
  }
}

/**
 * Implementation of hook_preprocess_node().
 */
function rss_resource_preprocess_node(&$vars) {
  if (!empty($vars['node']) && $vars['node']->type == 'rss_resource') {
    $vars['feed_url'] = $vars['node']->field_url[0]['safe'];
    $vars['site_url'] = $vars['node']->field_site_url[0]['safe'];
  }
}

/**
 * Implementation of hook_theme_registry_alter()
 */
function rss_resource_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'rss_resource');
  if (!in_array($path, $theme_registry['node']['theme paths']))
	array_unshift($theme_registry['node']['theme paths'], $path);
}

/**
 * Implementation of hook_hub_get_resource_types()
 *
 * @return array
 *    An array of node-type strings.
 */
function rss_resource_hub_get_resource_types() {
  return array('rss_resource');
}

/**
 * Hook hook_hub_get_resource_url()
 *
 * @param object $resourceNode
 * @return array
 *    An array of url strings.
 */
function rss_resource_hub_get_resource_url($resourceNode) {
  if ($resourceNode->type == 'rss_resource' && isset($resourceNode->field_site_url[0]['value']))
    return array($resourceNode->field_site_url[0]['value']);
}

/**
 * Hook hook_hub_get_resource_updates().
 *
 * Answer an array of updates fetched by the resource. Each update must be an array
 * with the following items:
 *
 *  Required elements:
 *    'guid'      A globally unique identifier string for the update. Will be used to prevent duplicates.
 *    'title'     A title for the update.
 *
 *  Optional elements:
 *    'timestamp' An ISO 8601 date/time that reflects when the update item occurred.
 *                If not supplied, defaults to NOW().
 *    'visibility'  One of 'class', 'institution', or 'public'. If not supplied,
 *                  defaults to 'class'.
 *    'url'       A URL for the item.
 *    'body'      An HTML string representing the content of the update.
 *
 * @return array
 *    An array of updates
 */
function rss_resource_hub_get_resource_updates($resourceNode) {
  if ($resourceNode->type != 'rss_resource')
    return array();

  if (!$resourceNode->field_url[0]['value'])
    return array();

  return rss_resource_fetch_updates($resourceNode->field_url[0]['value'], $resourceNode);
}

/**
 * Answer an array of updates from an RSS feed URL. Each update must be an array
 * with the following items:
 *
 *  Required elements:
 *    'guid'      A globally unique identifier string for the update. Will be used to prevent duplicates.
 *    'title'     A title for the update.
 *
 *  Optional elements:
 *    'timestamp' An ISO 8601 date/time that reflects when the update item occurred.
 *                If not supplied, defaults to NOW().
 *    'visibility'  One of 'class', 'institution', or 'public'. If not supplied,
 *                  defaults to 'class'.
 *    'url'       A URL for the item.
 *    'body'      An HTML string representing the content of the update.
 *
 * @param string $feedUrl
 * @param string $resourceNode
 *      The resource node should have a field_hub_perms to determine visibility.
 * @return array
 *    An array of updates
 */
function rss_resource_fetch_updates($feedUrl, $resourceNode) {
  try {
    $feed = rss_resource_fetch_feed($feedUrl);

    if (isset($resourceNode->field_hub_perms[0]['value']))
      $visibility = $resourceNode->field_hub_perms[0]['value'];
    else
      $visibility = 'class';

    return rss_resource_updates_from_feed($feed, $visibility, $resourceNode->nid);
  } catch (Exception $e) {
    watchdog('hub_updates', $e->getMessage(), array(), WATCHDOG_WARNING);
    form_set_error('hub_updates', $e->getMessage());
    return array();
  }
}

/**
 * Answer a SimplePie feed for a URL.
 *
 * @param string $url
 *      The feed URL
 * @return object SimplePie
 *      The contents of the feed.
 */
function rss_resource_fetch_feed ($url) {
  module_load_include('inc', 'rss_page', 'simplepie');
  $feed = new SimplePie();
  $feed->set_feed_url($url);
  $feed->handle_content_type();
  if (!$feed->init()) {
    throw new Exception(t('Could not fetch feed from \'@url\'. @error', array('@url' => $url, '@error' => $feed->error())), 404);
  }
  return $feed;
}

/**
 * Answer an array of updates from a SimplePie feed.
 *
 * @param object SimplePie $feed
 *      The RSS feed object
 * @param string $visibility
 *      One of 'class', 'institution', or 'public'
 * @return array
 *      An array of updates
 */
function rss_resource_updates_from_feed ($feed, $visibility = 'class') {
  if (!in_array($visibility, array('class', 'institution', 'public')))
    throw new InvalidArgumentException(t('Unknown visibility @visibility.', array('@visibility' => $visibility)));

  $updates = array();
  foreach ($feed->get_items() as $item) {
    $update = array(
      'title' => html_entity_decode($item->get_title(), ENT_QUOTES),
      'visibility' => $visibility,
    );
    if ($item->get_id())
      $update['guid'] = $item->get_id();
    else
      $update['guid'] = $item->get_link();

    if (!$update['title'])
      $update['title'] = 'Untitled';

    if ($timestamp = $item->get_date('c'))
      $update['timestamp'] = $timestamp;

    if ($url = $item->get_link())
      $update['url'] = $url;

    if ($content = $item->get_content()) {
      // @todo Ensure that html is safe.
      $update['body'] = $content;
    }

    $updates[] = $update;
  }

  return $updates;
}