<?php
// $Id$

/**
 * @file
 * Implements handlers for go queries
 */

/**
 * Implementation of hook_menu()
 *
 */
function middlebury_go_menu () {
  $items['middlebury_go/search'] = array(
    'page callback' => 'middlebury_go_handle_search',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
   $items['admin/settings/middlebury_go'] = array(
    'title' => t('Go Settings'),
    'description' => 'Configure settings for Go search.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('middlebury_go_admin_settings'),
    'access arguments' => array('administer go'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Provide settings page
 *
 * @return array
 */
function middlebury_go_admin_settings () {
  $form['database'] = array(
    '#type' => 'fieldset',
    '#title' => t('Go Database Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['database']['middlebury_go_db_dsn'] = array(
    '#type' => 'textfield',
    '#title' => t('DSN'),
    '#default_value' => variable_get('middlebury_go_db_dsn', ''),
    '#size' => 75,
    '#description' => t('A PDO DSN<br/><br/>Example: <code>mysql:host=host.example.edu;dbname=go</code>'),
  );

  $form['database']['middlebury_go_db_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#default_value' => variable_get('middlebury_go_db_user', ''),
    '#size' => 75,
    '#description' => t('The username to use to connect to the go database.'),
  );

  $form['database']['middlebury_go_db_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#default_value' => variable_get('middlebury_go_db_password', ''),
    '#size' => 75,
    '#description' => t('The password to use to connect to the go database.'),
  );

  $form['scope'] = array(
    '#type' => 'fieldset',
    '#title' => t('Go Scope Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['scope']['middlebury_go_scope_institution'] = array(
    '#type' => 'textfield',
    '#title' => t('Scope'),
    '#default_value' => variable_get('middlebury_go_scope_institution', ''),
    '#size' => 75,
    '#description' => t('The institution whose go links you want to search. Ex: middlebury.edu'),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_perm().
 */
function middlebury_go_perm() {
  return array('administer go');
}

/**
 * Handle searching for a term.
 *
 * @return void
 */
function middlebury_go_handle_search () {
  drupal_set_header('Content-Type: text/plain');

  try {
    if (isset($_GET['limit']))
      $limit = intval($_GET['limit']);
    else
      $limit = 100;
    if (isset($_GET['all']))
      $all = intval($_GET['all']);
    else
      $all = 0;
    foreach (middlebury_go_query($_GET['query'], $limit, $all) as $name) {
      print $name."\n";
    }
  } catch (InvalidArgumentException $e) {
    drupal_set_header('HTTP/1.1 400 Bad Request');
    print $e->getMessage();
    watchdog('MiddleburyGO', $e->getMessage(), array(), WATCHDOG_NOTICE);
  } catch (Exception $e) {
    drupal_set_header('HTTP/1.1 500 Internal Server Error');
    print $e->getMessage();
    watchdog('MiddleburyGO', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
}

/**
 * Search the go database and return an array of go shortcuts that match the query
 *
 * @param string $query
 * @param int $max
 * @param bool $all
 * @return array
 */
function middlebury_go_query ($query, $max = 100, $all = 0) {
  if (!is_string($query))
    throw new InvalidArgumentException('$query must be a string.');

  if (!strlen($query))
    return array();

  $max = max(1, intval($max));

  $pdo = middlebury_go_pdo();

  if ($inst = variable_get('middlebury_go_scope_institution', '')) {
    $stmt = $pdo->prepare("SELECT name FROM (SELECT code.name FROM code WHERE code.unsearchable=:all AND code.name LIKE (:name1) AND code.institution=:inst1 UNION SELECT alias.name FROM alias WHERE alias.name LIKE (:name2) AND alias.institution=:inst2) as code_alias ORDER BY name ASC LIMIT ".$max);
    $stmt->bindValue(":inst1", $inst);
    $stmt->bindValue(":inst2", $inst);
  } else {
    $stmt = $pdo->prepare("SELECT name FROM (SELECT code.name FROM code WHERE code.unsearchable=:all AND code.name LIKE (:name1) UNION SELECT alias.name FROM alias WHERE alias.name LIKE (:name2) ) as code_alias ORDER BY name ASC LIMIT ".$max);
  }
  $stmt->bindValue(":name1", $query.'%');
  $stmt->bindValue(":name2", $query.'%');
  $stmt->bindValue(":all", $all);
  $stmt->execute();
  return $stmt->fetchAll(PDO::FETCH_COLUMN);
}

/**
 * Search the go database and return a single URL for the matching code
 *
 * Throws an Exception if not found.
 *
 * @param string $query
 * @return string
 */
function middlebury_go_fetch_url ($name, $all = 0) {
  if (!is_string($name))
    throw new InvalidArgumentException('$name must be a string.');

  if (!strlen($name))
    return array();

  $pdo = middlebury_go_pdo();

  if ($inst = variable_get('middlebury_go_scope_institution', '')) {
    $stmt = $pdo->prepare("SELECT code.url FROM code LEFT JOIN alias ON (code.name = alias.code) WHERE code.unsearchable=:all AND ((code.name=:name1 AND code.institution=:inst1) OR (alias.name=:name2 AND alias.institution=:inst2))");
    $stmt->bindValue(":inst1", $inst);
    $stmt->bindValue(":inst2", $inst);
  } else {
    $stmt = $pdo->prepare("SELECT code.url FROM code LEFT JOIN alias ON (code.name = alias.code) WHERE code.unsearchable=:all AND (code.name=:name1 OR alias.name=:name2)");
  }
  $stmt->bindValue(":name1", $name);
  $stmt->bindValue(":name2", $name);
  $stmt->bindValue(":all", $all);
  $stmt->execute();
  
  $row = $stmt->fetch(PDO::FETCH_ASSOC);
  if (!$row)
    throw new Exception('No result matches.');
  
  return $row['url'];
}

/**
 * Search the go database and return a single go name that matches a go name or an alias.
 *
 * Throws an Exception if not found.
 *
 * @param string $query
 * @return string
 */
function middlebury_go_fetch_primary_name ($name, $all = 0) {
  if (!is_string($name))
    throw new InvalidArgumentException('$name must be a string.');

  if (!strlen($name))
    return array();

  $pdo = middlebury_go_pdo();

  if ($inst = variable_get('go_scope_institution', '')) {
    $stmt = $pdo->prepare("SELECT code.name FROM code LEFT JOIN alias ON (code.name = alias.code) WHERE code.unsearchable=:all AND ((code.name=:name1 AND code.institution=:inst1) OR (alias.name=:name2 AND alias.institution=:inst2))");
    $stmt->bindValue(":inst1", $inst);
    $stmt->bindValue(":inst2", $inst);
  } else {
    $stmt = $pdo->prepare("SELECT code.name FROM code LEFT JOIN alias ON (code.name = alias.code) WHERE code.unsearchable=:all AND (code.name=:name1 OR alias.name=:name2)");
  }
  $stmt->bindValue(":name1", $name);
  $stmt->bindValue(":name2", $name);
  $stmt->bindValue(":all", $all);
  $stmt->execute();

  $row = $stmt->fetch(PDO::FETCH_ASSOC);
  if (!$row || !strlen($row['name']))
    throw new Exception('No result matches.');

  return $row['name'];
}

/**
 * Answer the PDO object for go
 *
 * @return PDO
 */
function middlebury_go_pdo () {
  $pdo = new PDO(variable_get('middlebury_go_db_dsn', ''), variable_get('middlebury_go_db_user', ''), variable_get('middlebury_go_db_password', ''));
  $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
  return $pdo;
}