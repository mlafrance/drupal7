<?php

define('MIDDLEBURY_SCOREBOARD_SYMBOLS', '*,^,%,&,$,!,@,~,**,^^,%%,&&,$$,!!,@@,~~,***,^^^,%%%,&&&,$$$,!!!,@@@,~~~');
define('MIDDLEBURY_SCOREBOARD_FEEDURL', 'http://web.middlebury.edu/database/athletics/rss/ScoreboardRSS.aspx');
define('MIDDLEBURY_SCOREBOARD_NAMESPACE', 'http://www.middlebury.edu/athletics');

/**
 * Implements of hook_block_info().
 */
function middlebury_block_info() {
  $blocks['scoreboard'] = array(
    'info' => t('Midd Scoreboard'),
    'cache' => DRUPAL_NO_CACHE,
  );

  $blocks['webcasts'] = array(
    'info' => t('Midd Webcasts'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function middlebury_block_view($delta = '') {
  if ($delta == 'scoreboard') {
    $GLOBALS['conf']['cache'] = FALSE;

    $chrSymbols = explode(',', MIDDLEBURY_SCOREBOARD_SYMBOLS);

    module_load_include('inc', 'rss_page', 'simplepie');
    $date = getdate();
    $season = '';
    if ($date['mon'] > 5) {
      $season = $date['year'] . '-' . ($date['year'] + 1);
    }
    else {
      $season = ($date['year'] - 1) . '-' . $date['year'];
    }

    $feed_url = MIDDLEBURY_SCOREBOARD_FEEDURL . '?active=true&season=' . $season;
    $feed = new SimplePie();
    $feed->set_feed_url($feed_url);
    $feed->enable_cache(false);
    $feed->init();
    $feed->handle_content_type();
    $events = $feed->get_items();

    $records = array();
    $lines = array();
    $footnotes = array();
    foreach ($events as $ev) {
      $event = _middlebury_compile_event(MIDDLEBURY_SCOREBOARD_NAMESPACE, $ev);
      $sorttitle = $event['sorttitle'];
      if (!empty($event['record']) && empty($records[$sorttitle]))
        $records[$sorttitle] = $event['record'];
      if ($event['score'] == $event['time']) {
        if (!isset($lines[$sorttitle]['next']) || $lines[$sorttitle]['next']['timestamp'] > $event['timestamp']) {
          $lines[$sorttitle]['next'] = $event;
          $lines[$sorttitle]['link'] = $event['link'];
        }
      }
      elseif (!isset($lines[$sorttitle]['last']) || $lines[$sorttitle]['last']['timestamp'] < $event['timestamp']) {
        $lines[$sorttitle]['last'] = $event;
        $lines[$sorttitle]['link'] = $event['link'];
      }

      if (!isset($lines[$sorttitle]['title'])) $lines[$sorttitle]['title'] = $event['title'];
    }

    $block['subject'] = t('Scoreboard');
    ob_start();
    print '<div class="box" id="scoreboard">';
    print '<h2 id="header_scoreboard"><img src="' . base_path() . drupal_get_path('module', 'middlebury') . '/images/scoreboard.png" width="256" height="43" alt="Scoreboard"/></h2>';
    print '<div class="RightNavScoreboard">';

    ksort($lines);
    foreach ($lines as $sport => $event) {
      print '<div class="RightNavScoreboardSport">';
        print '<div class="RightNavScoreboardSportHeader">';
          print '<div class="RightNavScoreboardHeaderLeft">';
          print '<a href="' . $event['link'] . '">' . $event['title'] . '</a></div>';
          if (!empty($records[$sport])):
            print '<div class="RightNavScoreboardHeaderRight">(' . $records[$sport] . ')</div>';
          endif;
        print '</div>';
        if (isset($event['last'])):
          print '<div class="RightNavScoreBoardAltItem">';
            print '<div class="RightNavScoreboardItemDate">' . $event['last']['date'] . '</div>';
            print '<div class="RightNavScoreboardItemScore">';
            print $event['last']['score'];
            print '</div>';
            print '<div class="RightNavScoreboardItemOpp">' . $event['last']['opponent'];
            if ($event['last']['footnote']) {
              if (!array_key_exists($event['last']['footnote'], $footnotes)) {
                $footnotes[$event['last']['footnote']] = array_shift($chrSymbols);
              }
              print $footnotes[$event['last']['footnote']];
            }
            print '</div>';
          print '</div>';
        endif;
        print '<div class="RightNavScoreBoardItem">';
          print '<div class="RightNavScoreboardItemDate">' . $event['next']['date'] . '</div>';
          print '<div class="RightNavScoreboardItemScore">' . $event['next']['time'] . '</div>';
          print '<div class="RightNavScoreboardItemOpp">' . $event['next']['opponent'];
          if ($event['next']['footnote']) {
            if (!array_key_exists($event['next']['footnote'], $footnotes)) {
              $footnotes[$event['next']['footnote']] = array_shift($chrSymbols);
            }
            print $footnotes[$event['next']['footnote']];
          }
          print '</div>';
        print '</div>';
      print '</div>';
    }

    print '</div><p>';

    foreach ($footnotes as $footnote => $symbol) {
      print $symbol . ' ' . $footnote . '<br />';
    }

    print '</p><div id="scoreboard_footer">';
      print '<a href="http://go.middlebury.edu/athletics/live">Live Coverage</a>';
      print '<a href="' . MIDDLEBURY_SCOREBOARD_FEEDURL . '?active=true&season=' . $season . '" class="rssfeed"><img src="' . base_path() . drupal_get_path('theme', 'midd') . '/images/social/feed.png" width="24" height="24" alt="RSS Feed" /></a>';
    print '</div>';

    print '</div>';

    $block['content'] = ob_get_clean();
    return $block;
  }
  elseif ($delta == 'webcasts') {
    module_load_include('inc', 'rss_page', 'simplepie');
    $date = getdate();
    $season = '';
    if ($date['mon'] > 5) {
      $season = $date['year'] . '-' . ($date['year'] + 1);
    }
    else {
      $season = ($date['year'] - 1) . '-' . $date['year'];
    }

    $feed_url = MIDDLEBURY_SCOREBOARD_FEEDURL . '?season=' . $season;
    $feed = new SimplePie();
    $feed->set_feed_url($feed_url);
    $feed->enable_cache(false);
    $feed->init();
    $feed->handle_content_type();
    $events = $feed->get_items();

    $lines = array();
    $footnotes = array();
    foreach ($events as $ev) {
      $event = _middlebury_compile_event(MIDDLEBURY_SCOREBOARD_NAMESPACE, $ev);
      if (!$event['urlvideo'] && !$event['urlaudio'] && !$event['urllives']) continue;
      if ($event['timestamp'] < strtotime('today')) continue;

      $lines[$event['timestamp'] . $event['sorttitle']] = $event;
    }
    ksort($lines);

    ob_start();
    print "<table>";
      print "<tbody>";
        print "<tr>";
          print "<th>Date</th>";
          print "<th>Sport</th>";
          print "<th>Opponent</th>";
          print "<th>Time</th>";
          print "<th>Stats</th>";
          print "<th>Video</th>";
          print "<th>Audio</th>";
        print "</tr>";
      foreach ($lines as $timestamp => $e) {
        print "<tr>";
          print "<td>" . $e['date'] . "</td>";
          print "<td>" . $e['title'] . "</td>";
          print "<td>" . $e['opponent'] . "</td>";
          print "<td>" . $e['time'] . "</td>";
          print '<td align="center">' . ($e['urllives'] ? '<a href="' . $e['urllives'] . '" target="_blank"><img src="' . base_path() . drupal_get_path('module', 'middlebury') . '/images/livestats.gif" width="24" height="18" alt="Live Stats"/></a>' : '') . "</td>";
          print '<td align="center">' . ($e['urlvideo'] ? '<a href="' . $e['urlvideo'] . '" target="_blank"><img src="' . base_path() . drupal_get_path('module', 'middlebury') . '/images/video.gif" width="24" height="10" alt="Video"/></a>' : '') . "</td>";
          print '<td align="center">' . ($e['urlaudio'] ? '<a href="' . $e['urlaudio'] . '" target="_blank"><img src="' . base_path() . drupal_get_path('module', 'middlebury') . '/images/audio.gif" width="12" height="20" alt="Audio"/></a>' : '') . "</td>";
        print "</tr>";
      }
      print "</tbody>";
    print "</table>";
    $block['content'] = ob_get_clean();
    return $block;
  }
}

function middlebury_content_edit_submit($form_id, &$form_values) {
  db_query("UPDATE {mm_tree} SET color_scheme = '%s' WHERE mmtid = %d",
    array($form_values['values']['color_scheme'], $form_values['values']['path']));
}

/**
 * Implements hook_form_alter().
 */
function middlebury_form_alter(&$form, &$form_state) {
  // News content type edit form.
  if (!empty($form['form_id']) && $form['form_id']['#value'] == 'news_node_form') {
    global $user;
    profile_load_profile($user);
    if (!empty($user->profile_image_form_element)) {
      foreach (array_keys($form['field_news_image']) as $key) {
        if (drupal_substr($key, 0, 4) == '#mm_') {
          unset($form['field_news_image'][$key]);
        }
      }
      unset($form['field_news_image']['#element_validate']);
      $form['field_news_image']['#type'] = 'nodereference_autocomplete';
      $form['field_news_image']['#value_callback'] = 'nodereference_autocomplete_value';
      $form['field_news_image']['#columns'] = array('nid');
      $form['field_news_image']['#default_value'] = array(
        'nid' => !empty($form['#node']->field_news_image[0]['nid']) ? $form['#node']->field_news_image[0]['nid'] : NULL,
      );

      $form['#submit'][] = 'middlebury_news_image_submit';
    }
  }

  // Profile content type edit form.
  if (!empty($form['form_id']) && $form['form_id']['#value'] == 'profile_node_form') {
    if (!empty($form['#node']->field_user[0]['uid'])) {
      $user = user_load($form['#node']->field_user[0]['uid']);
      module_load_include('inc', 'biblio', 'includes/biblio.admin');
      _biblio_get_user_profile_form($form, $user);
      $form['biblio_profile']['#description'] = l(t('Start adding publications to your profile (opens in a new window)'), 'mm/' . $user->user_mmtid . '/publications', array('attributes' => array('target' => '_blank')));
      $form['biblio_profile']['#weight'] = 1;
      $form['biblio_profile']['#collapsed'] = FALSE;
      unset($form['biblio_profile']['biblio_my_pubs_menu']);
      unset($form['biblio_profile']['biblio_lastname']);
      $form['#submit'][] = 'middlebury_profile_biblio_submit';
    }
  }

  // LIS "report a problem" form.
  if (!empty($form['form_id']) && $form['form_id']['#value'] == 'webform_client_form_269156') {
    $form['submitted']['originating_url']['#default_value'] = $_SERVER[HTTP_REFERER];
  }

  // Library "put on reserve" form.
  if (!empty($form['form_id']) && $form['form_id']['#value'] == 'webform_client_form_272406') {
    if (isset($_REQUEST['openurl'])) $form['submitted']['openurl']['#default_value'] = $_REQUEST['openurl'];
    if (isset($_REQUEST['author'])) $form['submitted']['author']['#default_value'] = $_REQUEST['author'];
    if (isset($_REQUEST['title'])) $form['submitted']['title']['#default_value'] = $_REQUEST['title'];
    if (isset($_REQUEST['publisher'])) $form['submitted']['publisher']['#default_value'] = $_REQUEST['publisher'];
    if (isset($_REQUEST['isbn'])) $form['submitted']['isbn']['#default_value'] = $_REQUEST['isbn'];
    if (isset($_REQUEST['callno'])) $form['submitted']['callno']['#default_value'] = $_REQUEST['callno'];
    if (isset($_REQUEST['requester_name'])) $form['submitted']['requester_name']['#default_value'] = $_REQUEST['requester_name'];
    if (isset($_REQUEST['course_id'])) $form['submitted']['course_id']['#default_value'] = $_REQUEST['course_id'];
    if (isset($_REQUEST['loan_period'])) $form['submitted']['loan_period']['#default_value'] = $_REQUEST['loan_period'];
    if (isset($_REQUEST['ncopies'])) $form['submitted']['ncopies']['#default_value'] = $_REQUEST['ncopies'];
  }

  // Library "MOOD" form.
  if (!empty($form['form_id']) && $form['form_id']['#value'] == 'webform_client_form_355290') {
    if (isset($_REQUEST['author'])) $form['submitted']['author']['#default_value'] = $_REQUEST['author'];
    if (isset($_REQUEST['title'])) $form['submitted']['title']['#default_value'] = $_REQUEST['title'];
    if (isset($_REQUEST['publisher'])) $form['submitted']['publisher']['#default_value'] = $_REQUEST['publisher'];
    if (isset($_REQUEST['isbn'])) $form['submitted']['isbn']['#default_value'] = $_REQUEST['isbn'];
    if (isset($_REQUEST['date'])) $form['submitted']['date']['#default_value'] = $_REQUEST['date'];
  }
}

function middlebury_form_mm_ui_content_edit_alter(&$form, &$form_state) {
  $schemes = array(
    '' => 'Use scheme from parent',
    'basic' => 'Basic',
    'apple' => 'Apple',
    'grape' => 'Grape',
    'lake' => 'Lake',
    'leaf' => 'Leaf',
    'maple' => 'Maple',
    'sun' => 'Sun',
  );

  $form['settings_appearance']['color_scheme'] = array(
    '#type' => 'select',
    '#title' => t('Page Color Scheme'),
    '#default_value' => isset($form['#parameters'][2]->color_scheme) ? $form['#parameters'][2]->color_scheme : '',
    '#options' => $schemes,
  );

  $form['#submit'][] = 'middlebury_content_edit_submit';
}

function middlebury_form_webform_components_form_alter(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'middlebury') . '/middlebury.css');
}

function middlebury_form_webform_emails_form_alter(&$form, &$form_state) {
  drupal_add_css(drupal_get_path('module', 'middlebury') . '/middlebury.css');
}

function middlebury_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['submit']['#id'] == 'edit-submit-cid-records' ||
      $form['submit']['#id'] == 'edit-submit-uro-records' ||
      $form['submit']['#id'] == 'edit-submit-bsnsvcs-housing') {
    foreach ($form['#info'] as $filter => $info) {
      $form[$info['value']]['#options'] = array_merge(array('%' => ''), $form[$info['value']]['#options']);
    }
    $form['reset'] = array(
      '#value' => '<input class="form-button" type="reset" value="Reset" onclick="javascript:$(this.form).clearForm();$(this.form).submit();" />',
      '#id' => 'edit-reset-exposed-form',
    );
    $form['submit']['#value'] = t('Search');
    array_unshift($form['#submit'], 'middlebury_views_exposed_form_submit');
  }

  if ($form['#id'] == 'views-exposed-form-millennium-new-default') {
    foreach ($form['term_node_tid_depth']['#options'] as $tid => &$options) {
      if (is_object($options)) {
        foreach ($options->option as $ttid => &$title) {
          if ($title == 'History & Archaeology')
            $title = 'History';
        }
      }
    }

    foreach ($form['term_node_tid_depth_1']['#options'] as $tid => &$title) {
      if ($title == 'Projected medium')
        $title = 'Videos';
    }
    asort($form['term_node_tid_depth_1']['#options']);

    jquery_ui_add(array('ui.widget', 'ui.selectmenu', 'ui.position'));
    drupal_add_css(drupal_get_path('module', 'jquery_ui') . '/jquery.ui/themes/base/jquery.ui.selectmenu.css');
    drupal_add_css(drupal_get_path('module', 'jquery_ui') . '/jquery.ui/themes/base/jquery.ui.theme.css');
    drupal_add_js(drupal_get_path('module', 'middlebury') . '/middlebury_library_items.js', 'module', 'footer');
    drupal_add_css(drupal_get_path('module', 'middlebury') . '/middlebury_library_items.css');
  }
}

function middlebury_get_color_scheme($mmtid) {
  $result = NULL;

  while (is_numeric($mmtid) && $result == NULL && $mmtid != "1") {
    $data = db_fetch_object(db_query("SELECT color_scheme, parent FROM {mm_tree} WHERE mmtid = %d", $mmtid));

    if ($data->color_scheme != '0') {
      $result = $data->color_scheme;
    }

    $mmtid = $data->parent;
  }

  if ($result == NULL) $result = 'basic';

  return $result;
}

/**
 * Retrieve a user's directory record.
 */
function middlebury_get_directory($uid) {
  $user = user_load($uid);
  $record = array();

  try {
    $company = "Middlebury";
    $tmp = new SoapClient("http://web.middlebury.edu/database/directory/WebDirectory.asmx?WSDL", array("trace" => TRUE));
    $results = $tmp->uidSearch(array('uid' => $user->init));

    $xml = new SimpleXMLElement($results->uidSearchResult->any);

    if (isset($xml->record->property)) {
      foreach ($xml->record->property as $property) {
        $record[(string)$property['name']] = (string)$property['value'];
      }
    }
  } catch (Exception $e) {
    // return an empty record if the lookup fails
  }

  return $record;
}

function middlebury_get_toplevel($mmtid) {
  if (empty($_REQUEST['q']))
    return '';

  $aliases = explode('/', $_REQUEST['q']);

  if (count($aliases) > 0) {
    return $aliases[0];
  }

  return '';
}

/**
 * Add a CSS file to the page that will hide the right sidebar on most Middlebury page templates.
 */
function middlebury_hide_sidebar() {
  drupal_add_css(drupal_get_path('theme', 'midd') . '/hide-sidebar.css');
}

/**
 * Implements hook_menu().
 */
function middlebury_menu() {
  $items = array();

  $items['middlebury_vcard/%node'] = array(
    'title' => 'middlebury_vcard',
    'type' => MENU_CALLBACK,
    'page callback' => 'middlebury_vcard_fetch',
    'page arguments' => array(1),
    'access callback' => 'vcard_perm_check',
  );

  $items['middlebury_repec'] = array(
    'title' => 'middlebury_repec',
    'type' => MENU_CALLBACK,
    'page callback' => 'middlebury_repec_rss',
    'access callback' => TRUE,
  );

  $items['middlebury_site/%'] = array(
    'title' => 'middlebury_site',
    'type' => MENU_CALLBACK,
    'page callback' => 'middlebury_site_goto',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['admin/config/middlebury'] = array(
    'title' => 'Middlebury Configuration',
    'description' => 'Configuration settings for Middlebury modules',
    'position' => 'right',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;
}

/**
 * Handle the news node submit action where we don't have an mmtid for the image.
 */
function middlebury_news_image_submit($form_id, &$form_values) {
  if (!empty($form_values['values']['field_news_image']) &&
      is_array($form_values['values']['field_news_image']) &&
      !empty($form_values['values']['field_news_image']['nid']) &&
      empty($form_values['values']['field_news_image']['mmtid'])) {
    $node = node_load($form_values['values']['field_news_image']['nid']);
    unset($form_values['values']['field_news_image']);
    $mmtids = array_keys($node->mm_catlist);
    $form_values['values']['field_news_image'][0] = array(
      'mmtid' => $mmtids[0],
      'nid' => $node->nid,
    );
    $form_values['clicked_button']['#post']['field_news_image'] = $mmtids[0] . '/' . $node->nid . '{' . $node->title . '}';
  }
}

function middlebury_preprocess_node(&$vars) {

  // Run content-type-specific preprocess functions
  $function = __FUNCTION__ . '_' . $vars['node']->type;
  if (function_exists($function)) {
    $function($vars);
  }

}

function middlebury_preprocess_node_news(&$vars) {
  $max_width = 120;

  if (empty($vars['nid']) || arg(3) == $vars['nid']) {
    $max_width = 200;

    $arg2 = arg(2);
    if (arg(0) != 'newsletter' && (empty($arg2) || $arg2 != 'feed') && $vars['node']->field_url[0]['value'] && !$vars['links']) {
      header('Location:' . $vars['node']->field_url[0]['value'], TRUE, 302);
      exit();
    }

    if (isset($vars['node']->field_mediacontact[0]['uid']) && $vars['node']->field_mediacontact[0]['uid'] != '') {
      $record = middlebury_get_directory($vars['node']->field_mediacontact[0]['uid']);
      $vars['displayname'] = isset($record['displayname']) ? $record['displayname'] : '';
      $vars['email'] = isset($record['mail']) ? $record['mail'] : '';
      $vars['phone'] = isset($record['telephonenumber']) ? $record['telephonenumber'] : '';
    }

    if ($vars['node']->field_altcaption[0]['value']) {
      $vars['caption'] = $vars['node']->field_altcaption[0]['value'];
    }

    middlebury_hide_sidebar();
  }
  else {
    $vars['teaser'] = $vars['node']->field_teaser[0]['safe'];
    $vars['template_files'][] = 'node-newslist';
  }

  if ($vars['node']->field_imageurl[0]['value']) {
    $width = $vars['node']->field_imgwidth[0]['value'];
    $height = $vars['node']->field_imgheight[0]['value'];

    if ($width > $max_width) {
      $height = $max_width * $height / $width;
      $width = $max_width;
    }

    $vars['image'] = '<img src="' . $vars['node']->field_imageurl[0]['value'] . '" width="' . $width . '" height="' . $height . '" />';
    $vars['height'] = $height + 10;
  }
  elseif (isset($vars['node']->field_news_image[0]['nid'])) {
    $vars['image'] = middlebury_monster_menus_get_image($vars['node']->field_news_image[0]['nid'], $max_width, NULL, 'small', '', $vars);
    preg_match('/height=\"([0-9\.]+)\"/', $vars['image'], $matches);
    if (isset($matches[1])) {
      $vars['height'] = $matches[1] + 10;
    }
  }

  $vars['date'] = date('F j, Y', $vars['node']->field_altdate[0]['value'] ? strtotime($vars['node']->field_altdate[0]['value']) : (isset($vars['node']->publish_on) ? $vars['node']->publish_on : $vars['node']->revision_timestamp));
}

function middlebury_preprocess_node_profile(&$vars) {
  middlebury_hide_sidebar();

  // Directory Information
  $record = middlebury_get_directory($vars['node']->field_user[0]['uid']);

  // If there is no record in the Directory, or if it is hidden, do not show the "Download Contact Information" link.
  $showDownload = TRUE;
  if (empty($record)) $showDownload = FALSE;

  foreach ($vars['node']->field_hidden as $hidden) {
    if (!is_null($hidden['value']) && isset($record[$hidden['value']])) {
      unset($record[$hidden['value']]);
    }
  }

  if ($vars['node']->field_alttitle[0]['value']) {
    $record['title'] = $vars['node']->field_alttitle[0]['value'];
  }

  if ($vars['node']->field_altemail[0]['value']) {
    $record['mail'] = $vars['node']->field_altemail[0]['value'];
  }

  if ($vars['node']->field_altphone[0]['value']) {
    $record['telephonenumber'] = $vars['node']->field_altphone[0]['value'];
  }

  if (isset($record['extensionattribute3'])) {
    preg_match('/([A-Za-z\s]+), ([A-Z]{2}) ([0-9]{5})/', $record['extensionattribute3'], $csz);
    $record['city'] = $csz[1];
    $record['state'] = $csz[2];
    $record['zip'] = $csz[3];
  }

  $record['department'] = isset($record['department']) ? htmlentities($record['department']) : '';

  $vars['record'] = $record;

  $image_width = 200;

  if (preg_match('/athletics\/sports\/.*\/node\//', $vars['node_url']) ||
      empty($vars['nid']) || arg(3) == $vars['nid']) {
    // Course Catalog
    course_list_preprocess_course_list($vars);

    // Biblio Publications
    if (!empty($vars['node']->field_user[0]['uid'])) {
      $user = user_load($vars['node']->field_user[0]['uid']);
      if (!empty($user->biblio_show_profile) && $user->biblio_show_profile == 1) {
        module_load_include('inc', 'biblio', 'includes/biblio.pages');
        $vars['publications'] = biblio_db_search('inline', 'author', $user->biblio_contributor_id);
      }
    }
  }
  else {
    // Has video
    if (strpos($vars['content'], '<embed') !== FALSE ||
        strpos($vars['content'], '<object') !== FALSE ||
        strpos($vars['content'], 'youtube-player') !== FALSE ||
        strpos($vars['content'], '<video') !== FALSE) {
          $vars['video'] = TRUE;
    }

    $image_width = 85;

    $vars['template_files'][] = 'node-profilelist';

    $mmtid = arg(1);
    $vars['node_url'] = url('mm/' . $mmtid . '/node/' . $vars['nid']);
  }

  // Image
  if ($vars['node']->field_profile_photo[0]['nid']) {
    $vars['image'] = middlebury_monster_menus_get_image($vars['node']->field_profile_photo[0]['nid'], $image_width, NULL, 'standard');
  }
  elseif (!in_array('Profile Photo', $vars['node']->field_hidden[0]) && isset($record['samaccountname'])) {
    $vars['image'] = '<img src="http://web.middlebury.edu/database/directory/DirectoryImage.aspx?username=' . $record['samaccountname'] . '" width="' . $image_width . '" height="' . $image_width . '" />';
  }
  else {
    $vars['image'] = '<img src="http://web.middlebury.edu/database/directory/Images/directory_default.jpg" width="' . $image_width . '" height="' . $image_width . '" />';
  }

  // vCard
  if ($showDownload) {
    $matches = array();
    preg_match('/src=\"([^\"]*)\"/', $vars['image'], $matches);

    global $base_url;

    $vcard = new stdClass;
    $vcard->uid = $vars['node']->field_user[0]['uid'];
    $vcard->name = $vars['node']->title;
    if (!empty($record['title']))
      $vcard->title = $record['title'];
    if (!empty($record['mail']))
      $vcard->mail = $record['mail'];
    $vcard->picture = $matches[1][0] == '/' ? $base_url . $matches[1] : $matches[1];
    if (!empty($record['givenname']))
      $vcard->n_given = $record['givenname'];
    if (!empty($record['sn']))
      $vcard->n_family = $record['sn'];
    if (!empty($record['department']))
      $vcard->organization = array('Middlebury College', $record['department']);
    if (!empty($record['telephonenumber']))
      $vcard->telephone_work = $record['telephonenumber'];
    $vcard->URL = $base_url . base_path() . middlebury_monster_menus_get_nid_url($vars['node']->nid) . '/node/' . $vars['node']->nid;
    if (!empty($record['extensionattribute4']))
      $vcard->adr_street = $record['extensionattribute4'];
    if (!empty($record['city']))
      $vcard->adr_locality = $record['city'];
    if (!empty($record['state']))
      $vcard->adr_region = $record['state'];
    if (!empty($record['zip']))
      $vcard->adr_postcode = $record['zip'];
    $vcard->adr_country = "United States";
    $vars['vcard'] = $vcard;
  }
}

/**
 * Modify variables in the page template
 */
function middlebury_preprocess_page(&$vars) {
  $vars['color_scheme'] = middlebury_get_color_scheme(arg(1));
}

function middlebury_profile_biblio_submit($form_id, &$form_values) {
  if (!empty($form_values['values']['field_user'][0]['uid'])) {
    $biblios = array();
    foreach ($form_values['values'] as $key => $value) {
      if (drupal_substr($key, 0, 7) == 'biblio_') {
        $biblios[$key] = $value;
      }
    }

    $user = user_load($form_values['values']['field_user'][0]['uid']);
    $user = user_save($user, $biblios);
  }
}

/**
 * purge URLs from varnish.
 *
 * @param string $regex.
 * @return boolean
 */
function middlebury_purge_varnish_url($regex) {
  if (defined('MIDD_PURGE_VARNISH_URL') && defined('MIDD_PURGE_VARNISH_ACCESS_KEY')) {
    $data = http_build_query(array(
        'ACCESS_KEY' => MIDD_PURGE_VARNISH_ACCESS_KEY,
        'PATH_REGEX' => $regex
      ), '', '&');
    $result = drupal_http_request(
      MIDD_PURGE_VARNISH_URL,
      array('Content-Type' => 'application/x-www-form-urlencoded'),
      'POST',
      $data
    );
    if ($result->code == 200) {
      watchdog('middlebury', 'Purged varnish cache.<br/>DATA: @data<br/>Result: @output', array('@data' => $data, '@output' => $result->data));
      return TRUE;
    }
    else {
      watchdog('middlebury', 'Could not purge varnish cache.', array(), WATCHDOG_WARNING);
      return FALSE;
    }
  }
  // Not properly configured.
  else {
    watchdog('middlebury', 'MIDD_PURGE_VARNISH_URL and MIDD_PURGE_VARNISH_ACCESS_KEY must be set. Could not purge varnish cache.', array(), WATCHDOG_WARNING);
    return FALSE;
  }
}

/**
 * Menu callback to redirect you to a personal home page.
 */
function middlebury_site_goto($username) {
  $user = user_load_by_mail($username . '@middlebury.edu');
  if (!empty($user->user_mmtid)) {
    drupal_goto('mm/' . $user->user_mmtid);
  }
}

/**
 * Menu callback function to fetch vcard data from a specific node.
 */
function middlebury_vcard_fetch($node) {
  $vars = array('node' => $node);

  middlebury_preprocess_node_profile($vars);

  vcard_fetch($vars['vcard']);
}

/**
 * Create an RSS feed of Economics working papers.
 */
function middlebury_repec_rss() {
  $rss = '';
  $cache = cache_get('economics_repec');
  if (!empty($cache->data)) {
    $rss = $cache->data;
  }
  else {
    $items = array();
    $base_url = 'http://sandcat.middlebury.edu/econ/repec/mdl/mdlpap/';
    $rdfs = file_get_contents($base_url);
    $matches = array();
    preg_match_all('/<a href=\"(.*\.rdf)\">/', $rdfs, $matches);

    if (!empty($matches[1])) {
      foreach ($matches[1] as $file) {
        $rdf = file_get_contents($base_url . $file);
        $time = strtotime('now');
        $args = array('category' => 'Economics');

        // Get the title
        $title = '';
        $matches = array();
        preg_match('/Title:([^\\n]*)\\n/', $rdf, $matches);
        if (!empty($matches[1])) {
          $title = mb_convert_encoding(trim($matches[1]), 'UTF-8');
        }

        // Get the link
        $link = '';
        $matches = array();
        preg_match('/File-URL:([^\\n]*)\\n/', $rdf, $matches);
        if (!empty($matches[1])) {
          $link = trim($matches[1]);
          $args['guid'] = $link;
        }

        // Get the abstract
        $description = '';
        $matches = array();
        preg_match('/Abstract:([^\\n]*)\\n/', $rdf, $matches);
        if (!empty($matches[1])) {
          $description = mb_convert_encoding(trim($matches[1]), 'UTF-8');
          $args['content:encoded'] = $description;
        }

        // Get the publication date
        $pubdate = '';
        $matches = array();
        preg_match('/Creation-Date:([^\\n]*)\\n/', $rdf, $matches);
        if (!empty($matches[1])) {
          $time = strtotime(trim($matches[1]));
          $args['pubDate'] = date('r', $time);
        }

        $item = format_rss_item($title, $link, $description, $args);

        // Build the author elements
        $matches = array();
        preg_match_all('/Author-Name:([^\\n]*)\\n(Author-Email:([^\\n]*)\n)?/', $rdf, $matches);
        if (!empty($matches[1])) {
          for ($i = 0; $i < count($matches[1]); $i++) {
            $a = trim($matches[1][$i]);
            if (!empty($matches[3][$i])) {
              $a = trim($matches[3][$i]) . ' (' . $a . ')';
            }

            $item = str_replace('</item>', "\t<dc:creator>" . mb_convert_encoding($a, 'UTF-8') . "</dc:creator>\n</item>", $item);
          }
        }

        $item = str_replace('<guid>', '<guid isPermaLink="true">', $item);
        $items[$item] = $time;
      }
    }

    arsort($items);
    $rss .= "<rss version=\"2.0\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\">\n";
    $rss .= format_rss_channel("Economics Working Papers", "http://go.middlebury.edu/econ", "RePEc (Research Papers in Economics) is a collaborative effort of hundreds of volunteers in 75 countries to enhance the dissemination of research in economics.", implode('', array_keys($items)));
    $rss .= "</rss>";
    $rss = str_replace("<channel>\n", "<channel>\n\t<atom:link href=\"http://www.middlebury.edu/middlebury_repec\" rel=\"self\" type=\"application/rss+xml\" />\n", $rss);
    cache_set('economics_repec', $rss, 'cache', CACHE_PERMANENT);
  }

  drupal_add_http_header('Content-Type', 'application/rss+xml; charset=utf-8');
  print $rss;
}

/**
 * Implements hook_views_api().
 */
function middlebury_views_api() {
  return array(
    'api' => 2,
  );
}

function middlebury_views_data_alter(&$data) {
  $data['node_data_field_news_image']['field_news_image_mmtid']['field']['handler'] = 'middlebury_handler_field_news_image';
  $data['node_data_field_story_image']['field_story_image_mmtid']['field']['handler'] = 'middlebury_handler_field_story_image';
  $data['node_data_field_profile_photo']['field_profile_photo_mmtid']['field']['handler'] = 'middlebury_handler_field_profile_photo';
}

function middlebury_views_handlers() {
  return array(
    'info' => array(
      'path' => drupal_get_path('module', 'middlebury'),
    ),
    'handlers' => array(
      'middlebury_handler_field_news_image' => array(
        'parent' => 'content_handler_field_multiple',
      ),
      'middlebury_handler_field_story_image' => array(
        'parent' => 'content_handler_field_multiple',
      ),
      'middlebury_handler_field_profile_photo' => array(
        'parent' => 'content_handler_field_multiple',
      ),
    ),
  );
}

function middlebury_views_exposed_form_submit($form_id, &$form_values) {
  foreach ($form_values['values'] as $id => $field) {
    if (!is_array($field) || empty($field)) continue;
    foreach ($field as $k => $v) {
      if ($v == '%') unset($form_values['values'][$id][$k]);
    }
  }
}

function middlebury_views_pre_execute(&$view) {
  if ($view->name == 'Health_Handbook_Tags') {
    $search = array('GROUP BY nid');
    $replace = array('');
    $view->build_info['query'] = str_replace($search,
                                              $replace,
                                              $view->build_info['query']);
  }
  elseif ($view->name == 'stories_feed') {
    $search = array('ORDER BY');
    $replace = array('ORDER BY CASE WHEN node.nid IN (' . variable_get('submit_story_open_story', 0) . ') THEN 1 ELSE 2 END,');
    $view->build_info['query'] = str_replace($search,
                                              $replace,
                                              $view->build_info['query']);
  }
  elseif ($view->name == 'CONTENTdm_Theses') {
    $search = "node_data_field_dc_publisher.field_dc_publisher_value = '%s'";
    $replace = '';
    for ($i = 0; $i < count($view->args); $i++) {
      if ($i > 0) {
        $view->build_info['query_args'][] = $view->args[$i];
        $replace .= " OR ";
      }

      $replace .= $search;
    }
    $view->build_info['query'] = str_replace($search,
                                              $replace,
                                              $view->build_info['query']);
  }
}

function _middlebury_compile_event($namespace, $event) {
  module_load_include('inc', 'rss_page', 'simplepie');
  $sportName = $event->get_item_tags($namespace, "sportName");
  $gender = $event->get_item_tags($namespace, "gender");
  $genderless = array('Baseball', 'Field Hockey', 'Football', 'Softball', 'Volleyball');
  $title = (in_array($sportName[0]['data'], $genderless) ? '' : ($gender[0]['data'] == 'M' ? 'Men\'s ' : ($gender[0]['data'] == 'W' ? 'Women\'s ' : ''))) . $sportName[0]['data'];
  $sorttitle = $sportName[0]['data'] . ' ' . $gender[0]['data'];
  $guid = $event->get_id();

  $eventdate = $event->get_item_tags($namespace, "eventDate");
  $record = $event->get_item_tags($namespace, "record");
  $link = $event->get_item_tags($namespace, "urlsport");

  $exhibition = $event->get_item_tags($namespace, "exhibition");
  $tournament = $event->get_item_tags($namespace, "tournament");

  $scoremidd = $event->get_item_tags($namespace, "scoremidd");
  $scoreopp = $event->get_item_tags($namespace, "scoreopp");
  $scoretext = $event->get_item_tags($namespace, "scoreText");
  $notation = $event->get_item_tags($namespace, "notation");

  $opponent = $event->get_item_tags($namespace, "opponent");
  $venueType = $event->get_item_tags($namespace, "venueType");
  $venueName = $event->get_item_tags($namespace, "venueName");
  $location = $event->get_item_tags($namespace, "location");

  $urlstory = $event->get_item_tags($namespace, "urlstory");
  $urlstats = $event->get_item_tags($namespace, "urlstats");
  $urlvideo = $event->get_item_tags($namespace, "urlvideo");
  $urlaudio = $event->get_item_tags($namespace, "urlaudio");
  $urllives = $event->get_item_tags($namespace, "urllivestats");

  $timestamp = strtotime($eventdate[0]['data']);
  $date = date('m/d', $timestamp);
  $time = date('g:i A', $timestamp) != '1:00 AM' ? date('g:i A', $timestamp) : 'TBA';

  $footnote = '';
  if ($venueType[0]['data'] == 'Neutral' && ($location[0]['data'] != 'Neutral' || $tournament[0]['data'] == 'False')) {
    if ($tournament[0]['data'] == 'True') {
      if ($location[0]['data'] != '-') {
        $footnote = 'at ' . $location[0]['data'];
      }
    }
    elseif ($location[0]['data'] == 'Neutral' || $location[0]['data'] == '-') {
      $footnote = $venueName[0]['data'];
    }
    elseif (!$venueName[0]['data']) {
      $footnote = $location[0]['data'];
    }
    else {
      $footnote = $venueName[0]['data'] . ' at ' . $location[0]['data'];
    }
  }

  $score = '';
  if ($scoremidd[0]['data'] || $scoremidd[0]['data'] === "0") {
    $intmidd = (int)$scoremidd[0]['data'];
    $intopp = (int)$scoreopp[0]['data'];

    if ($intmidd > $intopp) {
      $score = $intmidd . '-' . $intopp . ' W';
    }
    elseif ($intmidd < $intopp) {
      $score = $intopp . '-' . $intmidd . ' L';
    }
    else {
      $score = $intmidd . '-' . $intopp . ' T';
    }
  }
  elseif ($scoretext[0]['data']) {
    $score = $scoretext[0]['data'];
  }
  if ($score == '') {
    if ($urlstats[0]['data']) {
      $score = 'results';
    }
    else {
      $score = $time;
    }
  }
  if ($urlstats[0]['data']) {
    $score = '<a href="' . $urlstats[0]['data'] . '" target="_blank">' . $score . '</a>';
  }

  $opponent = $opponent[0]['data'];
  if ($venueType[0]['data'] == 'Away') {
    $opponent = 'at ' . $opponent;
  }
  elseif ((isset($venueType['data']) && $venueType['data'] == 'Neutral') ||
          (isset($tournament[0]['data']) && $tournament[0]['data'] == 'True')) {
    $opponent = $venueName[0]['data'];
  }
  if ($urlstory[0]['data']) {
    $opponent = '<a href="' . $urlstory[0]['data'] . '">' . $opponent . '</a>';
  }
  if ($notation[0]['data']) {
    $opponent .= ' ' . $notation[0]['data'];
  }

  $new_event = array(
    'guid' => $guid,
    'timestamp' => $timestamp,
    'date' => $date,
    'time' => $time,
    'score' => $score,
    'record' => $record[0]['data'],
    'opponent' => $opponent,
    'urlstory' => $urlstory[0]['data'],
    'urlstats' => $urlstats[0]['data'],
    'urlvideo' => $urlvideo[0]['data'],
    'urlaudio' => $urlaudio[0]['data'],
    'urllives' => $urllives[0]['data'],
    'footnote' => $footnote,
    'link' => $link[0]['data'],
    'title' => $title,
    'sorttitle' => $sorttitle,
  );

  return $new_event;
}